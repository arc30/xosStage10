//print "Timer ew";

alias currentPID S0;
currentPID= (PTBR-1024)/8;

alias currentPCB S1;
currentPCB=READY_LIST + currentPID*32;

[currentPCB+1]=1; //state is ready

[currentPCB+2]=BP;
[currentPCB+3]=SP-1;  //ignoring the ip pushed on top of stack while interrupt occured

alias physicalSP S2;
physicalSP=([PTBR + 2*(SP/512)]*512) + (SP%512); 
//got to manually translate SP addr(logical) to Phy in kernel mode 


[currentPCB+4]=[physicalSP]; 

// Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR ;
[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1 ; 
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3 ;
[ currentPCB + 11 ] = R4;
[ currentPCB + 12 ] = R5 ; 
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7 ; 


alias counterPID S3;


/////////////////////////////////////////////////////

counterPID=currentPID+1;

while ([READY_LIST+32*counterPID+1]!=1) do
	counterPID=(counterPID+1)%32;
	if (counterPID==currentPID) then 
		break;
	endif;
endwhile;

alias newPCB S4;

newPCB=READY_LIST+32*counterPID;
breakpoint;


//load values of reg from this pcb to registers

[newPCB+1]=2;

BP=[newPCB+2];
SP=[newPCB+3];
PTBR=[newPCB+5];
PTLR=[newPCB+6];

R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

SP = SP + 1;
alias newphysicalSP S2;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack

//[newPCB + 1]=2; 




ireturn;

